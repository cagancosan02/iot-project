options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: top_block
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: ''
    window_size: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: center_freq
  id: variable
  parameters:
    comment: ''
    value: channel_freq
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 180]
    rotation: 0
    state: enabled
- name: channel_freq
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: 433.92e6
    step: '1000'
    stop: 433.92e6
    value: '433920000'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 244]
    rotation: 0
    state: enabled
- name: channel_width
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '500'
    step: '100'
    stop: '50000'
    value: '20000'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [48, 372.0]
    rotation: 0
    state: enabled
- name: fftsize
  id: variable
  parameters:
    comment: ''
    value: '512'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [104, 116]
    rotation: 0
    state: enabled
- name: manchester_decoding
  id: variable
  parameters:
    comment: ''
    value: 'True'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [32, 508.0]
    rotation: 0
    state: true
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '2400000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 116]
    rotation: 0
    state: enabled
- name: band_pass_filter_0
  id: band_pass_filter
  parameters:
    affinity: ''
    alias: ''
    beta: '6.76'
    comment: ''
    decim: '1'
    gain: '1'
    high_cutoff_freq: channel_freq - center_freq + channel_width/2
    interp: '1'
    low_cutoff_freq: channel_freq - center_freq - channel_width/2
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    type: fir_filter_ccc
    width: '1000'
    win: window.WIN_KAISER
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [520, 236.0]
    rotation: 0
    state: disabled
- name: band_pass_filter_0_0
  id: band_pass_filter
  parameters:
    affinity: ''
    alias: ''
    beta: '6.76'
    comment: ''
    decim: '1'
    gain: '1'
    high_cutoff_freq: '10000'
    interp: '1'
    low_cutoff_freq: '-10000'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    type: fir_filter_ccc
    width: 10e3
    win: window.WIN_HAMMING
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [592, 516.0]
    rotation: 0
    state: enabled
- name: blocks_complex_to_mag_0
  id: blocks_complex_to_mag
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [856, 320.0]
    rotation: 0
    state: enabled
- name: blocks_complex_to_mag_squared_0
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [848, 424.0]
    rotation: 0
    state: disabled
- name: blocks_threshold_ff_0
  id: blocks_threshold_ff
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    high: '0.06'
    init: '0'
    low: '0.04'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1128, 308.0]
    rotation: 0
    state: true
- name: ook_demod_block
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach this file is saved, GRC\
      \ will instantiate the first class it finds to get\nports and parameters of\
      \ your block. The arguments to __init__  will be the\nparameters. All of them\
      \ are required to have default values!\n\"\"\"\nimport time\nimport numpy as\
      \ np\nfrom gnuradio import gr\n\nclass blk (gr.sync_block):\n    \"\"\"\n  \
      \  Block to decode the data on an already squared signal, comprised of 0's and\
      \ 1's.\n    \"\"\"\n\n    def __init__ (self, \n                symbol_rate\
      \ = 1e3,\n                sample_rate = 2.4e6,\n                manchester_decoding\
      \ = False,\n                #sink_file = None\n                ):  # only default\
      \ arguments here\n        \"\"\"\n        Constructor.\n\n        Args:\n  \
      \          symbol_rate -> Rate of symbols\n\n            sample_rate -> Number\
      \ of samples per second\n\n        manchester_decoding -> Enable/disable manchester\
      \ decoding\n\n            sink_file -> File to dump the packets. If it's 'None',\
      \ prints them on STDOUT\n        \"\"\"\n        gr.sync_block.__init__(\n \
      \           self,\n            name = 'OOK demod',\n            in_sig = [np.float32],\n\
      \            out_sig = []\n        )\n\n        self.manchester_decoding = True\n\
      \n        #self.sink_file = None\n        #if(sink_file != None):\n        #\
      \      self.sink_file = open(sink_file, \"a\")\n\n        # amount of samples\
      \ per symbol\n        self.threshold = sample_rate / symbol_rate\n        #\
      \ amount of samples that can be wrong when counting the 1's and 0's\n      \
      \  self.error_threshold = self.threshold\n\n        self.packet = ''\n     \
      \   self.count_1 = 0 # Counts consecutive 1's\n        self.count_0 = 0 # Counts\
      \ consecutive 0's\n        self.sample_1_complete = False\n        self.sample_0_complete\
      \ = False\n\n\n    def packet_found(self):\n      self.packet += '0' # Last\
      \ 0 of packet is never detected due to the bounded 0 count (in process_sample_0),\
      \ so add manually\n\n      if(self.manchester_decoding):\n        self.packet\
      \ = self.manchester_decoder(self.packet)\n\n      self.output_packet(self.packet)\n\
      \      self.packet = ''\n\n   \n    def output_packet(self, output):\n     \
      \ #if(self.sink_file):\n      #  self.sink_file.write(output + '\\n')\n    \
      \  #else:\n      if len(output) > 5:\n        print(\"\\nbits = \" + output\
      \ + \"\\n\")\n\n\n    def count_samples(self, sample1, sample2):\n      if(sample1\
      \ == 1):\n        self.count_1 += 1\n        if(sample2 == 0):\n          self.sample_1_complete\
      \ = True \n      elif(sample1 == 0):\n        self.count_0 += 1\n        if(sample2\
      \ == 1):\n          self.sample_0_complete = True \n\n\n    def process_sample_0(self):\n\
      \      if(self.count_0 > self.threshold - self.error_threshold and self.count_0\
      \ < self.threshold + self.error_threshold):\n        self.packet += '0'\n  \
      \    elif(self.count_0 > (self.threshold - self.error_threshold) * 2 and self.count_0\
      \ < (self.threshold + self.error_threshold) * 2):\n        self.packet += '00'\n\
      \      self.count_0 = 0\n      self.sample_0_complete = False\n\n\n    def process_sample_1(self):\n\
      \      if(self.count_1 > self.threshold - self.error_threshold and self.count_1\
      \ < self.threshold + self.error_threshold):\n        self.packet += '1'\n  \
      \    elif(self.count_1 > (self.threshold - self.error_threshold) * 2 and self.count_1\
      \ < (self.threshold + self.error_threshold) * 2):\n        self.packet += '11'\n\
      \      self.count_1 = 0\n      self.sample_1_complete = False\n\n\n    def manchester_decoder(self,\
      \ packet):\n      decode = ''\n\n      for i in range(0, len(packet) - 1, 2):\n\
      \        bits = packet[i] + packet[i + 1]\n        if(bits == '10'):\n     \
      \     decode += '0'\n        elif(bits == '01'):\n          decode += '1'\n\
      \        else:\n          i -= 1\n\n      return decode\n\n\n\n    def work\
      \ (self, input_items, *args, **kwargs):\n      samples = input_items[0]\n  \
      \    signal_detected = np.where(samples == 1)[0]\n      \n\n      if(len(signal_detected)\
      \ > 0):\n        for i in range(0, len(samples) - 1):\n          self.count_samples(samples[i],\
      \ samples[i + 1])\n          if(self.sample_1_complete):\n            self.process_sample_1()\n\
      \          elif(self.sample_0_complete):\n            self.process_sample_0()\n\
      \      elif(len(samples) > 0 and len(self.packet) > 0):\n        self.packet_found()\n\
      \n      return len(samples)\n"
    affinity: ''
    alias: ''
    comment: ''
    manchester_decoding: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    sample_rate: 1e6
    symbol_rate: 4e3
  states:
    _io_cache: ('OOK demod', 'blk', [('symbol_rate', '1000.0'), ('sample_rate', '2400000.0'),
      ('manchester_decoding', 'False')], [('0', 'float', 1)], [], "\n    Block to
      decode the data on an already squared signal, comprised of 0's and 1's.\n    ",
      ['manchester_decoding'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1352, 308.0]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_0_1_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'True'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '"Magnitude"'
    nconnections: '2'
    size: fftsize
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.018'
    tr_mode: qtgui.TRIG_MODE_AUTO
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '0.4'
    ymin: '0'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1248, 148.0]
    rotation: 0
    state: enabled
- name: qtgui_waterfall_sink_x_0
  id: qtgui_waterfall_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    axislabels: 'True'
    bw: samp_rate
    color1: '0'
    color10: '0'
    color2: '0'
    color3: '0'
    color4: '0'
    color5: '0'
    color6: '0'
    color7: '0'
    color8: '0'
    color9: '0'
    comment: ''
    fc: center_freq
    fftsize: fftsize
    freqhalf: 'True'
    grid: 'False'
    gui_hint: ''
    int_max: '10'
    int_min: '-140'
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '"Raw samples"'
    nconnections: '1'
    showports: 'True'
    type: complex
    update_time: '0.10'
    wintype: window.WIN_BLACKMAN_hARRIS
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [560, 112.0]
    rotation: 0
    state: disabled
- name: qtgui_waterfall_sink_x_0_1
  id: qtgui_waterfall_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    axislabels: 'True'
    bw: samp_rate
    color1: '0'
    color10: '0'
    color2: '0'
    color3: '0'
    color4: '0'
    color5: '0'
    color6: '0'
    color7: '0'
    color8: '0'
    color9: '0'
    comment: ''
    fc: center_freq
    fftsize: fftsize
    freqhalf: 'True'
    grid: 'False'
    gui_hint: ''
    int_max: '10'
    int_min: '-140'
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '"Post-filter"'
    nconnections: '1'
    showports: 'True'
    type: complex
    update_time: '0.10'
    wintype: window.WIN_BLACKMAN_hARRIS
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [848, 32.0]
    rotation: 0
    state: disabled
- name: rtlsdr_source_0_0
  id: rtlsdr_source
  parameters:
    affinity: ''
    alias: ''
    ant0: ''
    ant1: ''
    ant10: ''
    ant11: ''
    ant12: ''
    ant13: ''
    ant14: ''
    ant15: ''
    ant16: ''
    ant17: ''
    ant18: ''
    ant19: ''
    ant2: ''
    ant20: ''
    ant21: ''
    ant22: ''
    ant23: ''
    ant24: ''
    ant25: ''
    ant26: ''
    ant27: ''
    ant28: ''
    ant29: ''
    ant3: ''
    ant30: ''
    ant31: ''
    ant4: ''
    ant5: ''
    ant6: ''
    ant7: ''
    ant8: ''
    ant9: ''
    args: '""'
    bb_gain0: '20'
    bb_gain1: '20'
    bb_gain10: '20'
    bb_gain11: '20'
    bb_gain12: '20'
    bb_gain13: '20'
    bb_gain14: '20'
    bb_gain15: '20'
    bb_gain16: '20'
    bb_gain17: '20'
    bb_gain18: '20'
    bb_gain19: '20'
    bb_gain2: '20'
    bb_gain20: '20'
    bb_gain21: '20'
    bb_gain22: '20'
    bb_gain23: '20'
    bb_gain24: '20'
    bb_gain25: '20'
    bb_gain26: '20'
    bb_gain27: '20'
    bb_gain28: '20'
    bb_gain29: '20'
    bb_gain3: '20'
    bb_gain30: '20'
    bb_gain31: '20'
    bb_gain4: '20'
    bb_gain5: '20'
    bb_gain6: '20'
    bb_gain7: '20'
    bb_gain8: '20'
    bb_gain9: '20'
    bw0: '0'
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    corr0: '20'
    corr1: '0'
    corr10: '0'
    corr11: '0'
    corr12: '0'
    corr13: '0'
    corr14: '0'
    corr15: '0'
    corr16: '0'
    corr17: '0'
    corr18: '0'
    corr19: '0'
    corr2: '0'
    corr20: '0'
    corr21: '0'
    corr22: '0'
    corr23: '0'
    corr24: '0'
    corr25: '0'
    corr26: '0'
    corr27: '0'
    corr28: '0'
    corr29: '0'
    corr3: '0'
    corr30: '0'
    corr31: '0'
    corr4: '0'
    corr5: '0'
    corr6: '0'
    corr7: '0'
    corr8: '0'
    corr9: '0'
    dc_offset_mode0: '0'
    dc_offset_mode1: '0'
    dc_offset_mode10: '0'
    dc_offset_mode11: '0'
    dc_offset_mode12: '0'
    dc_offset_mode13: '0'
    dc_offset_mode14: '0'
    dc_offset_mode15: '0'
    dc_offset_mode16: '0'
    dc_offset_mode17: '0'
    dc_offset_mode18: '0'
    dc_offset_mode19: '0'
    dc_offset_mode2: '0'
    dc_offset_mode20: '0'
    dc_offset_mode21: '0'
    dc_offset_mode22: '0'
    dc_offset_mode23: '0'
    dc_offset_mode24: '0'
    dc_offset_mode25: '0'
    dc_offset_mode26: '0'
    dc_offset_mode27: '0'
    dc_offset_mode28: '0'
    dc_offset_mode29: '0'
    dc_offset_mode3: '0'
    dc_offset_mode30: '0'
    dc_offset_mode31: '0'
    dc_offset_mode4: '0'
    dc_offset_mode5: '0'
    dc_offset_mode6: '0'
    dc_offset_mode7: '0'
    dc_offset_mode8: '0'
    dc_offset_mode9: '0'
    freq0: 433.92e6
    freq1: 100e6
    freq10: 100e6
    freq11: 100e6
    freq12: 100e6
    freq13: 100e6
    freq14: 100e6
    freq15: 100e6
    freq16: 100e6
    freq17: 100e6
    freq18: 100e6
    freq19: 100e6
    freq2: 100e6
    freq20: 100e6
    freq21: 100e6
    freq22: 100e6
    freq23: 100e6
    freq24: 100e6
    freq25: 100e6
    freq26: 100e6
    freq27: 100e6
    freq28: 100e6
    freq29: 100e6
    freq3: 100e6
    freq30: 100e6
    freq31: 100e6
    freq4: 100e6
    freq5: 100e6
    freq6: 100e6
    freq7: 100e6
    freq8: 100e6
    freq9: 100e6
    gain0: '30'
    gain1: '10'
    gain10: '10'
    gain11: '10'
    gain12: '10'
    gain13: '10'
    gain14: '10'
    gain15: '10'
    gain16: '10'
    gain17: '10'
    gain18: '10'
    gain19: '10'
    gain2: '10'
    gain20: '10'
    gain21: '10'
    gain22: '10'
    gain23: '10'
    gain24: '10'
    gain25: '10'
    gain26: '10'
    gain27: '10'
    gain28: '10'
    gain29: '10'
    gain3: '10'
    gain30: '10'
    gain31: '10'
    gain4: '10'
    gain5: '10'
    gain6: '10'
    gain7: '10'
    gain8: '10'
    gain9: '10'
    gain_mode0: 'False'
    gain_mode1: 'False'
    gain_mode10: 'False'
    gain_mode11: 'False'
    gain_mode12: 'False'
    gain_mode13: 'False'
    gain_mode14: 'False'
    gain_mode15: 'False'
    gain_mode16: 'False'
    gain_mode17: 'False'
    gain_mode18: 'False'
    gain_mode19: 'False'
    gain_mode2: 'False'
    gain_mode20: 'False'
    gain_mode21: 'False'
    gain_mode22: 'False'
    gain_mode23: 'False'
    gain_mode24: 'False'
    gain_mode25: 'False'
    gain_mode26: 'False'
    gain_mode27: 'False'
    gain_mode28: 'False'
    gain_mode29: 'False'
    gain_mode3: 'False'
    gain_mode30: 'False'
    gain_mode31: 'False'
    gain_mode4: 'False'
    gain_mode5: 'False'
    gain_mode6: 'False'
    gain_mode7: 'False'
    gain_mode8: 'False'
    gain_mode9: 'False'
    if_gain0: '20'
    if_gain1: '20'
    if_gain10: '20'
    if_gain11: '20'
    if_gain12: '20'
    if_gain13: '20'
    if_gain14: '20'
    if_gain15: '20'
    if_gain16: '20'
    if_gain17: '20'
    if_gain18: '20'
    if_gain19: '20'
    if_gain2: '20'
    if_gain20: '20'
    if_gain21: '20'
    if_gain22: '20'
    if_gain23: '20'
    if_gain24: '20'
    if_gain25: '20'
    if_gain26: '20'
    if_gain27: '20'
    if_gain28: '20'
    if_gain29: '20'
    if_gain3: '20'
    if_gain30: '20'
    if_gain31: '20'
    if_gain4: '20'
    if_gain5: '20'
    if_gain6: '20'
    if_gain7: '20'
    if_gain8: '20'
    if_gain9: '20'
    iq_balance_mode0: '0'
    iq_balance_mode1: '0'
    iq_balance_mode10: '0'
    iq_balance_mode11: '0'
    iq_balance_mode12: '0'
    iq_balance_mode13: '0'
    iq_balance_mode14: '0'
    iq_balance_mode15: '0'
    iq_balance_mode16: '0'
    iq_balance_mode17: '0'
    iq_balance_mode18: '0'
    iq_balance_mode19: '0'
    iq_balance_mode2: '0'
    iq_balance_mode20: '0'
    iq_balance_mode21: '0'
    iq_balance_mode22: '0'
    iq_balance_mode23: '0'
    iq_balance_mode24: '0'
    iq_balance_mode25: '0'
    iq_balance_mode26: '0'
    iq_balance_mode27: '0'
    iq_balance_mode28: '0'
    iq_balance_mode29: '0'
    iq_balance_mode3: '0'
    iq_balance_mode30: '0'
    iq_balance_mode31: '0'
    iq_balance_mode4: '0'
    iq_balance_mode5: '0'
    iq_balance_mode6: '0'
    iq_balance_mode7: '0'
    iq_balance_mode8: '0'
    iq_balance_mode9: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    num_mboards: '1'
    sample_rate: '2400000.0'
    sync: sync
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [248, 204.0]
    rotation: 0
    state: disabled
- name: soapy_rtlsdr_source_0
  id: soapy_rtlsdr_source
  parameters:
    affinity: ''
    agc: 'False'
    alias: ''
    bias: 'False'
    bufflen: '16384'
    center_freq: center_freq
    comment: ''
    dev_args: ''
    freq_correction: '0'
    gain: '20'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [256, 316.0]
    rotation: 0
    state: true
- name: zeromq_push_sink_0_0
  id: zeromq_push_sink
  parameters:
    address: tcp://127.0.0.1:5558
    affinity: ''
    alias: ''
    bind: 'True'
    comment: ''
    hwm: '-1'
    pass_tags: 'False'
    timeout: '100'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1248, 452.0]
    rotation: 0
    state: disabled

connections:
- [band_pass_filter_0, '0', blocks_complex_to_mag_0, '0']
- [band_pass_filter_0, '0', qtgui_waterfall_sink_x_0_1, '0']
- [band_pass_filter_0_0, '0', blocks_complex_to_mag_0, '0']
- [blocks_complex_to_mag_0, '0', blocks_threshold_ff_0, '0']
- [blocks_complex_to_mag_0, '0', qtgui_time_sink_x_0_1_0, '0']
- [blocks_complex_to_mag_0, '0', zeromq_push_sink_0_0, '0']
- [blocks_complex_to_mag_squared_0, '0', blocks_threshold_ff_0, '0']
- [blocks_complex_to_mag_squared_0, '0', qtgui_time_sink_x_0_1_0, '0']
- [blocks_threshold_ff_0, '0', ook_demod_block, '0']
- [blocks_threshold_ff_0, '0', qtgui_time_sink_x_0_1_0, '1']
- [rtlsdr_source_0_0, '0', band_pass_filter_0, '0']
- [rtlsdr_source_0_0, '0', qtgui_waterfall_sink_x_0, '0']
- [soapy_rtlsdr_source_0, '0', band_pass_filter_0, '0']
- [soapy_rtlsdr_source_0, '0', band_pass_filter_0_0, '0']

metadata:
  file_format: 1
  grc_version: 3.10.8.0
