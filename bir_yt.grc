options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: bir_yt
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: Dead_space
  id: variable
  parameters:
    comment: ''
    value: '5000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [224, 244.0]
    rotation: 0
    state: true
- name: Decim
  id: variable
  parameters:
    comment: ''
    value: '2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [432, 44.0]
    rotation: 0
    state: true
- name: Inter
  id: variable
  parameters:
    comment: ''
    value: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [360, 124.0]
    rotation: 0
    state: true
- name: center_freq
  id: variable
  parameters:
    comment: ''
    value: channel_freq
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [32, 164.0]
    rotation: 0
    state: enabled
- name: channel_freq
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: 433.92e6
    step: '1000'
    stop: 433.92e6
    value: '433920000'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [16, 236.0]
    rotation: 0
    state: enabled
- name: channel_width
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '500'
    step: '100'
    stop: '50000'
    value: '20000'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [40, 356.0]
    rotation: 0
    state: enabled
- name: edge_offset
  id: variable
  parameters:
    comment: ''
    value: '20'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [272, 28.0]
    rotation: 0
    state: true
- name: fftsize
  id: variable
  parameters:
    comment: ''
    value: '512'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [128, 100.0]
    rotation: 0
    state: enabled
- name: manchester_decoding
  id: variable
  parameters:
    comment: ''
    value: 'True'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [24, 492.0]
    rotation: 0
    state: true
- name: number_of_preamble_bits
  id: variable
  parameters:
    comment: ''
    value: '6'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [200, 156.0]
    rotation: 0
    state: true
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '32000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 12]
    rotation: 0
    state: enabled
- name: samp_rate_0
  id: variable
  parameters:
    comment: ''
    value: '2400000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [32, 100.0]
    rotation: 0
    state: enabled
- name: blocks_complex_to_mag_0
  id: blocks_complex_to_mag
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [544, 448.0]
    rotation: 0
    state: true
- name: blocks_threshold_ff_0
  id: blocks_threshold_ff
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    high: '0.5'
    init: '0'
    low: '0.3'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1256, 444.0]
    rotation: 0
    state: true
- name: interp_fir_filter_xxx_0
  id: interp_fir_filter_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    interp: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_delay: '0'
    taps: '[1,1]'
    type: fff
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [768, 444.0]
    rotation: 0
    state: true
- name: ook_demod_block
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport sys\nimport json\nimport sqlite3\nfrom sqlite3\
      \ import Error\nimport os\n\n\ndata_set = np.array([])\nstart = int(0)\nstop\
      \ = int(0)\nsize = int(0)\nstate = int(1)\nkeep_track_flag = int(0)\nold_message\
      \ = []\nnumber_of_bits = 25\n\nTABLE_STRUCTURE = \"\"\"\n    CREATE TABLE IF\
      \ NOT EXISTS signals (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n    \
      \    date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        bits TEXT NOT NULL\n\
      \    );\n\"\"\"\n\nclass DBHandler:\n    def __init__(self, debug=None):\n \
      \       self.connection = None\n        self.debug = debug\n\n    def __get_current_db_path(self,\
      \ db_name):\n        self.__debug_printer(\"\u015Acie\u017Cka do bazy to: \"\
      \ + os.path.join(os.getcwd(), db_name))\n        return os.path.join(os.getcwd(),\
      \ db_name)\n\n    def __db_exists(self, db_name):\n        return os.path.exists(self.__get_current_db_path(db_name))\n\
      \    \n    def __debug_printer(self, message):\n        if self.debug:\n   \
      \         print(message)\n        else:\n            print(\"\", end=\"\")\n\
      \n    def create_db(self, db_name):\n        if not self.__db_exists(db_name):\n\
      \            try:\n                self.create_connection(db_name)\n       \
      \         cursor = self.connection.cursor()\n                cursor.execute(TABLE_STRUCTURE)\n\
      \                self.connection.commit()\n                self.__debug_printer(\"\
      Tabela zosta\u0142a utworzona\")\n            except Error as e:\n         \
      \       self.__debug_printer(f\"B\u0142\u0105d {e}\")\n        else:\n     \
      \       self.__debug_printer(\"Baza danych ju\u017C istnieje\")\n          \
      \  self.connection = sqlite3.connect(self.__get_current_db_path(db_name))\n\n\
      \    def create_connection(self, db_name):\n        try:\n            self.connection\
      \ = sqlite3.connect(db_name)\n            self.__debug_printer(f\"Po\u0142\u0105\
      czenie z baz\u0105 danych {db_name} udane\")\n        except Error as e:\n \
      \           self.__debug_printer(f\"B\u0142\u0105d {e}\")\n\n    def add_data(self,\
      \ value):\n        query = \"INSERT INTO signals (bits) VALUES (?);\"\n    \
      \    data = (value, )\n        try:\n            cursor = self.connection.cursor()\n\
      \            cursor.execute(query, data)\n            self.connection.commit()\n\
      \        except Error as e:\n            self.__debug_printer(f\"B\u0142\u0105\
      d {e}\")\n\n    def read_data_all(self):\n        query = \"SELECT * FROM signals;\"\
      \n        try:\n            cursor = self.connection.cursor()\n            cursor.execute(query)\n\
      \            rows = cursor.fetchall()\n            self.__debug_printer(\"Odczytane\
      \ dane:\")\n            for row in rows:\n                self.__debug_printer(row)\n\
      \            return rows\n        except Error as e:\n            self.__debug_printer(f\"\
      B\u0142\u0105d {e}\")\n\n    def read_data_single_row(self, index):\n      \
      \  query = \"SELECT * FROM signals WHERE id = ?;\"\n        data = (index, )\n\
      \        try:\n            cursor = self.connection.cursor()\n            cursor.execute(query,\
      \ data)\n            rows = cursor.fetchall()\n            return rows\n   \
      \     except Error as e:\n            self.__debug_printer(f\"B\u0142\u0105\
      d {e}\")\n\n    def delete_rows_table(self, table_name):\n        query = \"\
      DELETE FROM \" + table_name\n        try:\n            cursor = self.connection.cursor()\n\
      \            cursor.execute(query)\n        except Error as e:\n           \
      \ self.__debug_printer(f\"B\u0142\u0105d {e}\")\n\n\nclass blk(gr.sync_block):\
      \  \n    \"\"\"Embedded Python Block example - a simple multiply const\"\"\"\
      \n\n    def __init__(self, preamble_bits=1, edge_offset=1, dead_space=1):  #\
      \ only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='OOK Custom Decoder',   # will show up in GRC\n\
      \            in_sig=[np.float32],\n            out_sig=None\n        )\n   \
      \     self.preamble_bits = preamble_bits\n        self.edge_offset = edge_offset\n\
      \        self.dead_space = dead_space\n        self.db_name = \"ook_demod_db.db\"\
      \n\n        self.DBHandler = DBHandler(debug=True)\n        self.DBHandler.create_db(self.db_name)\n\
      \        \n\n    @staticmethod\n    def return_distances(signal):\n\n      \
      \  last_rising_edge = None\n        distances = []\n\n        for i in range(1,\
      \ len(signal)):\n            # Check if the current value is 1 and the previous\
      \ value is 0 (rising edge)\n            if signal[i] == 1 and signal[i-1] ==\
      \ 0:\n\n                # Calculate and annotate the distance from the last\
      \ rising edge, if it exists\n                if last_rising_edge is not None:\n\
      \                    distance = i - last_rising_edge\n                    distances.append(distance)\n\
      \                last_rising_edge = i\n        return distances\n    \n    @staticmethod\n\
      \    def group_distances(distances, tolerance=0.1):\n        groups = {}\n \
      \       for d in distances:\n            placed = False\n            for center\
      \ in groups:\n                if (1 - tolerance) * center <= d <= (1 + tolerance)\
      \ * center:\n                    groups[center].append(d)\n                \
      \    placed = True\n                    break\n            if not placed:\n\
      \                groups[d] = [d]\n        return groups\n\n    @staticmethod\n\
      \    def find_average_of_most_frequent_group(distances, tolerance=0.15):\n \
      \       # Group the distances\n        groups = blk.group_distances(distances,\
      \ tolerance)\n\n        # Find the most frequent group\n        most_frequent_group\
      \ = max(groups, key=lambda k: len(groups[k]))\n\n        # Calculate the average\
      \ of the most frequent group\n        average_of_group = sum(groups[most_frequent_group])\
      \ / len(groups[most_frequent_group])\n\n        return average_of_group\n  \
      \  \n    @staticmethod\n    def return_distances_and_count_highs(signal, artificial_bin_width):\n\
      \n        last_rising_edge = None\n        distances_and_counts = []\n\n   \
      \     for i in range(1, len(signal)):\n            if signal[i] == 1 and signal[i-1]\
      \ == 0:\n                if last_rising_edge is not None:\n                \
      \    distance = i - last_rising_edge\n                    high_states_count\
      \ = sum(signal[last_rising_edge:i])\n                    distances_and_counts.append((distance,\
      \ high_states_count))\n                    \n                last_rising_edge\
      \ = i\n\n        # Obliczanie odleg\u0142o\u015Bci i ilo\u015Bci jedynek dla\
      \ sztucznego binu\n        if last_rising_edge is not None:\n            artificial_distance\
      \ = artificial_bin_width\n            # Liczenie jedynek w sztucznym binie\n\
      \            end_of_artificial_bin = last_rising_edge + artificial_distance\n\
      \            high_states_count = sum(signal[last_rising_edge:end_of_artificial_bin])\n\
      \            distances_and_counts.append((artificial_distance, high_states_count))\n\
      \n        return distances_and_counts\n\n    @staticmethod\n    def filter_tuples_within_range(tuples_list,\
      \ center_value, percentage=10):\n        # Obliczanie zakresu\n        range_min\
      \ = center_value - (center_value * percentage / 100)\n        range_max = center_value\
      \ + (center_value * percentage / 100)\n\n        # Filtrowanie tupli\n     \
      \   filtered_list = [t for t in tuples_list if range_min <= t[0] <= range_max]\n\
      \        return filtered_list\n\n    @staticmethod\n    def decode(tuples_list):\n\
      \        results = []\n        for first, second in tuples_list:\n         \
      \   if first != 0:  # Aby unikn\u0105\u0107 dzielenia przez zero\n         \
      \       ratio = second / first\n                flag = 1 if ratio > 0.5 else\
      \ 0\n            else:\n                flag = 0  # W przypadku gdy pierwszy\
      \ element jest r\xF3wny 0\n            results.append(flag)\n        return\
      \ results\n\n    @staticmethod\n    def get_message_from_dataset(data_set):\n\
      \        \n        distances = blk.return_distances(data_set)\n        average_of_most_frequent\
      \ = blk.find_average_of_most_frequent_group(distances)\n        distances_and_counts\
      \ = blk.return_distances_and_count_highs(data_set, int(average_of_most_frequent))\n\
      \        filtered_list = blk.filter_tuples_within_range(distances_and_counts,\
      \ int(average_of_most_frequent))\n        message = blk.decode(filtered_list)\n\
      \        \n        return message\n\n    def work(self, input_items, output_items):\n\
      \        in0 = np.array(input_items[0])\n        \n        global state\n  \
      \      global data_set\n        global start\n        global stop\n        global\
      \ size\n        global keep_track_flag\n        global old_message\n       \
      \ \n        if state == 1:\n\n            if np.any(in0 > 0.5):\n \n       \
      \         size = 0\n            else:\n                size = size + len(in0)\n\
      \n                if size > self.dead_space:  \n                    size = 0\n\
      \                    state = 2\n        \n        if state == 2:\n\n       \
      \     leading_edge = np.abs(in0[:-1] - in0[1:]) > .5\n\n            if np.any(leading_edge\
      \ == True):\n\n                state = 3\n\n                data_set = np.append(data_set,\
      \ in0)\n\n        if state == 3:\n            data_set = np.append(data_set,\
      \ in0)\n            trailing_edge = np.abs(in0[:-1] - in0[1:]) > 0.5\n     \
      \       if np.any(trailing_edge == True):\n                size = 0\n      \
      \      else:\n                size = size + len(in0)\n\n                if size\
      \ > self.dead_space:\n                    size = 0\n                    state\
      \ = 4\n                    data_list = data_set.tolist()\n                 \
      \   with open('data_set_drogi_pilot.json', 'w') as file:\n                 \
      \       json.dump(data_list, file)\n        if state == 4:\n            \n \
      \           data = blk.get_message_from_dataset(data_set)\n            if len(data_set)\
      \ > 20000:\n                print(data)\n                self.DBHandler.create_connection(self.db_name)\n\
      \                self.DBHandler.add_data(\"\".join(str(one) for one in data))\n\
      \n            state = 1\n            size = 0\n            start = 0\n     \
      \       stop = 0\n            data_set = np.array([])\n        \n        \n\
      \        return len(input_items[0])"
    affinity: ''
    alias: ''
    comment: ''
    dead_space: Dead_space
    edge_offset: edge_offset
    maxoutbuf: '0'
    minoutbuf: '0'
    preamble_bits: number_of_preamble_bits
  states:
    _io_cache: ('OOK Custom Decoder', 'blk', [('preamble_bits', '1'), ('edge_offset',
      '1'), ('dead_space', '1')], [('0', 'float', 1)], [], 'Embedded Python Block
      example - a simple multiply const', ['dead_space', 'edge_offset', 'preamble_bits'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1488, 444.0]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_0_1_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'True'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '"Threshold"'
    nconnections: '1'
    size: '150000'
    srate: '1600000'
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.018'
    tr_mode: qtgui.TRIG_MODE_AUTO
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1.0'
    ymin: '-1.0'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1472, 220.0]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_0_1_0_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'True'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '"FIR filter"'
    nconnections: '1'
    size: '150000'
    srate: '3200000'
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.018'
    tr_mode: qtgui.TRIG_MODE_AUTO
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1.0'
    ymin: '-1.0'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1048, 212.0]
    rotation: 0
    state: disabled
- name: qtgui_time_sink_x_0_1_0_0_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'True'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '"Rational Resampler"'
    nconnections: '1'
    size: '150000'
    srate: '1600000'
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.018'
    tr_mode: qtgui.TRIG_MODE_AUTO
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1.0'
    ymin: '-1.0'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1264, 196.0]
    rotation: 0
    state: disabled
- name: qtgui_time_sink_x_0_1_0_0_1
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'True'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '"Complex to mag"'
    nconnections: '1'
    size: '150000'
    srate: '3200000'
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.018'
    tr_mode: qtgui.TRIG_MODE_AUTO
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1.0'
    ymin: '-1.0'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [776, 220.0]
    rotation: 0
    state: disabled
- name: rational_resampler_xxx_0
  id: rational_resampler_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: Decim
    fbw: '0'
    interp: Inter
    maxoutbuf: '0'
    minoutbuf: '0'
    taps: '[]'
    type: fff
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1024, 436.0]
    rotation: 0
    state: true
- name: soapy_rtlsdr_source_0
  id: soapy_rtlsdr_source
  parameters:
    affinity: ''
    agc: 'False'
    alias: ''
    bias: 'False'
    bufflen: '16384'
    center_freq: center_freq
    comment: ''
    dev_args: ''
    freq_correction: '0'
    gain: '20'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: '3200000'
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [320, 436.0]
    rotation: 0
    state: true

connections:
- [blocks_complex_to_mag_0, '0', interp_fir_filter_xxx_0, '0']
- [blocks_complex_to_mag_0, '0', qtgui_time_sink_x_0_1_0_0_1, '0']
- [blocks_threshold_ff_0, '0', ook_demod_block, '0']
- [blocks_threshold_ff_0, '0', qtgui_time_sink_x_0_1_0, '0']
- [interp_fir_filter_xxx_0, '0', qtgui_time_sink_x_0_1_0_0, '0']
- [interp_fir_filter_xxx_0, '0', rational_resampler_xxx_0, '0']
- [rational_resampler_xxx_0, '0', blocks_threshold_ff_0, '0']
- [rational_resampler_xxx_0, '0', qtgui_time_sink_x_0_1_0_0_0, '0']
- [soapy_rtlsdr_source_0, '0', blocks_complex_to_mag_0, '0']

metadata:
  file_format: 1
  grc_version: 3.10.8.0
